Description: CVE-2013-2256: Make flavors is_public option actually work
 When you create a flavor, you can set an is_public flag to be True or False.
 It is True by default.  When False, the intention is that the flavor is only
 accessible by an admin, unless you use the flavor_access API extension to
 grant access to specific tenants.
 .
 Unfortunately, the only place in the code where this was being enforced was
 when listing flavors through the API.  It would filter out the non-public ones
 for a non-admin.  Otherwise, the flavor was accessible. You could get the
 details, and you could boot an instance with it, if you figured out a valid
 flavor ID.
 .
 This patch adds enforcement down in the db layer.  It also fixes one place in
 the API where the context wasn't passed down to enable the enforcement to
 happen.
Author: Russell Bryant <rbryant@redhat.com>
Origin: upstream, https://review.openstack.org/#/c/37992/
Bug-Ubuntu: https://bugs.launchpad.com/+bugs/1194093
Bug-Debian: http://bugs.debian.org/718905
Date: Thu, 27 Jun 2013 21:00:05 +0000 (+0000)

--- /dev/null
+++ nova-2013.1.2/subunit.log
@@ -0,0 +1,18 @@
+time: 2013-06-18 13:34:04.675857Z
+test: nova.tests.api.openstack.test_xmlutil.SelectorTest.test_tree_selector
+time: 2013-06-18 13:34:06.153366Z
+tags: worker-0
+successful: nova.tests.api.openstack.test_xmlutil.SelectorTest.test_tree_selector [ multipart
+Content-Type: text/plain;charset=utf8
+pythonlogging:'nova'
+30
+Loading network driver 'nova.network.linux_net'
+0
+Content-Type: text/plain;charset=utf8
+stderr
+0
+Content-Type: text/plain;charset=utf8
+stdout
+1D
+Selector('test', 'values', 0)0
+]
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/test_flavors.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/test_flavors.py
@@ -50,7 +50,7 @@ FAKE_FLAVORS = {
 }
 
 
-def fake_instance_type_get_by_flavor_id(flavorid):
+def fake_instance_type_get_by_flavor_id(flavorid, ctxt=None):
     return FAKE_FLAVORS['flavor %s' % flavorid]
 
 
@@ -76,7 +76,7 @@ def empty_instance_type_get_all(inactive
     return {}
 
 
-def return_instance_type_not_found(flavor_id):
+def return_instance_type_not_found(flavor_id, ctxt=None):
     raise exception.InstanceTypeNotFound(instance_type_id=flavor_id)
 
 
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavor_disabled.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavor_disabled.py
@@ -39,7 +39,7 @@ FAKE_FLAVORS = {
 }
 
 
-def fake_instance_type_get_by_flavor_id(flavorid):
+def fake_instance_type_get_by_flavor_id(flavorid, ctxt=None):
     return FAKE_FLAVORS['flavor %s' % flavorid]
 
 
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavor_manage.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavor_manage.py
@@ -25,7 +25,8 @@ from nova import test
 from nova.tests.api.openstack import fakes
 
 
-def fake_get_instance_type_by_flavor_id(flavorid, read_deleted='yes'):
+def fake_get_instance_type_by_flavor_id(flavorid, ctxt=None,
+                                        read_deleted='yes'):
     if flavorid == 'failtest':
         raise exception.NotFound("Not found sucka!")
     elif not str(flavorid) == '1234':
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavorextradata.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavorextradata.py
@@ -23,7 +23,7 @@ from nova import test
 from nova.tests.api.openstack import fakes
 
 
-def fake_get_instance_type_by_flavor_id(flavorid):
+def fake_get_instance_type_by_flavor_id(flavorid, ctxt=None):
     return {
         'id': flavorid,
         'flavorid': str(flavorid),
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavor_rxtx.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavor_rxtx.py
@@ -38,7 +38,7 @@ FAKE_FLAVORS = {
 }
 
 
-def fake_instance_type_get_by_flavor_id(flavorid):
+def fake_instance_type_get_by_flavor_id(flavorid, ctxt=None):
     return FAKE_FLAVORS['flavor %s' % flavorid]
 
 
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavor_access.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavor_access.py
@@ -68,7 +68,7 @@ def fake_get_instance_type_access_by_fla
     return res
 
 
-def fake_get_instance_type_by_flavor_id(flavorid):
+def fake_get_instance_type_by_flavor_id(flavorid, ctxt=None):
     return INSTANCE_TYPES[flavorid]
 
 
--- nova-2013.1.2.orig/nova/tests/api/openstack/compute/contrib/test_flavor_swap.py
+++ nova-2013.1.2/nova/tests/api/openstack/compute/contrib/test_flavor_swap.py
@@ -38,7 +38,7 @@ FAKE_FLAVORS = {
 }
 
 
-def fake_instance_type_get_by_flavor_id(flavorid):
+def fake_instance_type_get_by_flavor_id(flavorid, ctxt=None):
     return FAKE_FLAVORS['flavor %s' % flavorid]
 
 
--- nova-2013.1.2.orig/nova/api/openstack/compute/flavors.py
+++ nova-2013.1.2/nova/api/openstack/compute/flavors.py
@@ -84,7 +84,9 @@ class Controller(wsgi.Controller):
     def show(self, req, id):
         """Return data about the given flavor id."""
         try:
-            flavor = instance_types.get_instance_type_by_flavor_id(id)
+            context = req.environ['nova.context']
+            flavor = instance_types.get_instance_type_by_flavor_id(id,
+                    ctxt=context)
             req.cache_db_flavor(flavor)
         except exception.NotFound:
             raise webob.exc.HTTPNotFound()
--- nova-2013.1.2.orig/nova/api/openstack/compute/contrib/flavor_access.py
+++ nova-2013.1.2/nova/api/openstack/compute/contrib/flavor_access.py
@@ -95,7 +95,8 @@ class FlavorAccessController(object):
         authorize(context)
 
         try:
-            flavor = instance_types.get_instance_type_by_flavor_id(flavor_id)
+            flavor = instance_types.get_instance_type_by_flavor_id(flavor_id,
+                    ctxt=context)
         except exception.FlavorNotFound:
             explanation = _("Flavor not found.")
             raise webob.exc.HTTPNotFound(explanation=explanation)
--- nova-2013.1.2.orig/nova/api/openstack/compute/contrib/flavormanage.py
+++ nova-2013.1.2/nova/api/openstack/compute/contrib/flavormanage.py
@@ -43,7 +43,7 @@ class FlavorManageController(wsgi.Contro
 
         try:
             flavor = instance_types.get_instance_type_by_flavor_id(
-                    id, read_deleted="no")
+                    id, ctxt=context, read_deleted="no")
         except exception.NotFound, e:
             raise webob.exc.HTTPNotFound(explanation=e.format_message())
 
--- nova-2013.1.2.orig/nova/compute/api.py
+++ nova-2013.1.2/nova/compute/api.py
@@ -1318,7 +1318,7 @@ class API(base.Base):
     #NOTE(bcwaldon): this doesn't really belong in this class
     def get_instance_type(self, context, instance_type_id):
         """Get an instance type by instance type id."""
-        return instance_types.get_instance_type(instance_type_id)
+        return instance_types.get_instance_type(instance_type_id, ctxt=context)
 
     def get(self, context, instance_id):
         """Get a single instance with the given instance_id."""
--- nova-2013.1.2.orig/nova/compute/instance_types.py
+++ nova-2013.1.2/nova/compute/instance_types.py
@@ -209,7 +209,7 @@ def get_instance_type_by_flavor_id(flavo
     if ctxt is None:
         ctxt = context.get_admin_context(read_deleted=read_deleted)
 
-    return db.instance_type_get_by_flavor_id(ctxt, flavorid)
+    return db.instance_type_get_by_flavor_id(ctxt, flavorid, read_deleted)
 
 
 def get_instance_type_access_by_flavor_id(flavorid, ctxt=None):
--- nova-2013.1.2.orig/nova/db/api.py
+++ nova-2013.1.2/nova/db/api.py
@@ -1292,9 +1292,9 @@ def instance_type_get_by_name(context, n
     return IMPL.instance_type_get_by_name(context, name)
 
 
-def instance_type_get_by_flavor_id(context, id):
+def instance_type_get_by_flavor_id(context, id, read_deleted=None):
     """Get instance type by flavor id."""
-    return IMPL.instance_type_get_by_flavor_id(context, id)
+    return IMPL.instance_type_get_by_flavor_id(context, id, read_deleted)
 
 
 def instance_type_destroy(context, name):
--- nova-2013.1.2.orig/nova/db/sqlalchemy/api.py
+++ nova-2013.1.2/nova/db/sqlalchemy/api.py
@@ -3556,7 +3556,7 @@ def instance_type_create(context, values
             pass
         try:
             instance_type_get_by_flavor_id(context, values['flavorid'],
-                                           session)
+                    read_deleted='no', session=session)
             raise exception.InstanceTypeIdExists(flavor_id=values['flavorid'])
         except exception.FlavorNotFound:
             pass
@@ -3598,9 +3598,16 @@ def _dict_with_extra_specs(inst_type_que
 
 
 def _instance_type_get_query(context, session=None, read_deleted=None):
-    return model_query(context, models.InstanceTypes, session=session,
+    query = model_query(context, models.InstanceTypes, session=session,
                        read_deleted=read_deleted).\
-                     options(joinedload('extra_specs'))
+                       options(joinedload('extra_specs'))
+    if not context.is_admin:
+        the_filter = [models.InstanceTypes.is_public == True]
+        the_filter.extend([
+            models.InstanceTypes.projects.any(project_id=context.project_id)
+        ])
+        query = query.filter(or_(*the_filter))
+    return query
 
 
 @require_context
@@ -3675,9 +3682,11 @@ def instance_type_get_by_name(context, n
 
 
 @require_context
-def instance_type_get_by_flavor_id(context, flavor_id, session=None):
+def instance_type_get_by_flavor_id(context, flavor_id, read_deleted,
+                                   session=None):
     """Returns a dict describing specific flavor_id."""
-    result = _instance_type_get_query(context, session=session).\
+    result = _instance_type_get_query(context, read_deleted=read_deleted,
+                                      session=session).\
                     filter_by(flavorid=flavor_id).\
                     first()
 
@@ -3727,7 +3736,7 @@ def instance_type_access_add(context, fl
     session = get_session()
     with session.begin():
         instance_type_ref = instance_type_get_by_flavor_id(context, flavor_id,
-                                                           session=session)
+                read_deleted='no', session=session)
         instance_type_id = instance_type_ref['id']
         access_ref = _instance_type_access_query(context, session=session).\
                         filter_by(instance_type_id=instance_type_id).\
@@ -3750,7 +3759,7 @@ def instance_type_access_remove(context,
     session = get_session()
     with session.begin():
         instance_type_ref = instance_type_get_by_flavor_id(context, flavor_id,
-                                                           session=session)
+                read_deleted='no', session=session)
         instance_type_id = instance_type_ref['id']
         count = _instance_type_access_query(context, session=session).\
                         filter_by(instance_type_id=instance_type_id).\
